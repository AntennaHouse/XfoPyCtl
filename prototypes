CXfoObjPtr createXfoObject();
void releaseXfoObject(CXfoObjPtr pXfoObj);
XfoFORMATTERTYPE getFormatterType(CXfoObjPtr pXfoObj);
void setFormatterType(CXfoObjPtr pXfoObj, XfoFORMATTERTYPE newVal);
char* getDocumentURI(CXfoObjPtr pXfoObj, char* pVal, int size);
void setDocumentURI(CXfoObjPtr pXfoObj, char* newVal);
char* getStylesheetURI(CXfoObjPtr pXfoObj, char* pVal, int size);
void setStylesheetURI(CXfoObjPtr pXfoObj, char* newVal);
void addUserStylesheetURI(CXfoObjPtr pXfoObj, char* newVal);
char* getStylesheetTitle(CXfoObjPtr pXfoObj, char* pVal, int size);
void setStylesheetTitle(CXfoObjPtr pXfoObj, char* newVal);
char* getHtmlDefaultCharset(CXfoObjPtr pXfoObj, char* pVal, int size);
void setHtmlDefaultCharset(CXfoObjPtr pXfoObj, char* newVal);
char* getOutputFilePath(CXfoObjPtr pXfoObj, char* pVal, int size);
void setOutputFilePath(CXfoObjPtr pXfoObj, char* newVal);
char* getOptionFileURI(CXfoObjPtr pXfoObj, char* pVal, int size, int n);
void setOptionFileURI(CXfoObjPtr pXfoObj, char* newVal);
void addOptionFileURI(CXfoObjPtr pXfoObj, char* newVal);
int getOptionFileCount(CXfoObjPtr pXfoObj);
char* getOutputFOPath(CXfoObjPtr pXfoObj, char* pVal, int size);
void setOutputFOPath(CXfoObjPtr pXfoObj, char* newVal);
char* getExternalXSLT(CXfoObjPtr pXfoObj, char* pVal, int size);
void setExternalXSLT(CXfoObjPtr pXfoObj, char* newVal);
char* getBaseURI(CXfoObjPtr pXfoObj, char* pVal, int size);
void setBaseURI(CXfoObjPtr pXfoObj, char* newVal);
char* getXSLTParamFormat(CXfoObjPtr pXfoObj, char* pVal, int size);
void setXSLTParamFormat(CXfoObjPtr pXfoObj, char* newVal);
long getStartPage(CXfoObjPtr pXfoObj);
void setStartPage(CXfoObjPtr pXfoObj, long newVal);
long getEndPage(CXfoObjPtr pXfoObj);
void setEndPage(CXfoObjPtr pXfoObj, long newVal);
void setPdfMasterPassword(CXfoObjPtr pXfoObj, char* newVal);
void setPdfOwnerPassword(CXfoObjPtr pXfoObj, char* newVal);
void setPdfUserPassword(CXfoObjPtr pXfoObj, char* newVal);
void setPdfNoPrinting(CXfoObjPtr pXfoObj, long newVal);
long getPdfNoPrinting(CXfoObjPtr pXfoObj);
void setPdfNoChanging(CXfoObjPtr pXfoObj, long newVal);
long getPdfNoChanging(CXfoObjPtr pXfoObj);
void setPdfNoContentCopying(CXfoObjPtr pXfoObj, long newVal);
long getPdfNoContentCopying(CXfoObjPtr pXfoObj);
void setPdfNoAddingOrChangingCommnets(CXfoObjPtr pXfoObj, long newVal);
long getPdfNoAddingOrChangingCommnets(CXfoObjPtr pXfoObj);
void setPdfNoAddingOrChangingComments(CXfoObjPtr pXfoObj, long newVal);
long getPdfNoAddingOrChangingComments(CXfoObjPtr pXfoObj);
void setPdfVersion(CXfoObjPtr pXfoObj, XfoPDFVERSION newVal);
XfoPDFVERSION	getPdfVersion(CXfoObjPtr pXfoObj);
void setPdfNoFillForm(CXfoObjPtr pXfoObj, long newVal);
long getPdfNoFillForm(CXfoObjPtr pXfoObj);
void setPdfNoAccessibility(CXfoObjPtr pXfoObj, long newVal);
long getPdfNoAccessibility(CXfoObjPtr pXfoObj);
void setPdfNoAssembleDoc(CXfoObjPtr pXfoObj, long newVal);
long getPdfNoAssembleDoc(CXfoObjPtr pXfoObj);
void setPdfEncryptLevel(CXfoObjPtr pXfoObj, XfoPDFENCRYPTLEVEL newVal);
XfoPDFENCRYPTLEVEL getPdfEncryptLevel(CXfoObjPtr pXfoObj);
long getPdfEmbedAllFonts(CXfoObjPtr pXfoObj);
void setPdfEmbedAllFonts(CXfoObjPtr pXfoObj, long newVal);
char* getPdfEmbedFonts(CXfoObjPtr pXfoObj, char* pVal, int size);
void setPdfEmbedFonts(CXfoObjPtr pXfoObj, char* newVal);
long getPdfErrorOnEmbedFault(CXfoObjPtr pXfoObj);
void setPdfErrorOnEmbedFault(CXfoObjPtr pXfoObj, long newVal);
long getPdfErrorOnMissingGlyph(CXfoObjPtr pXfoObj);
void setPdfErrorOnMissingGlyph(CXfoObjPtr pXfoObj, long newVal);
long getPdfEmbedSubsetFontPercentage(CXfoObjPtr pXfoObj);
void setPdfEmbedSubsetFontPercentage(CXfoObjPtr pXfoObj, long newVal);
XfoPDFPRINTALLOW getPdfPrintingAllowed(CXfoObjPtr pXfoObj);
void setPdfPrintingAllowed(CXfoObjPtr pXfoObj, XfoPDFPRINTALLOW newVal);
XfoPDFIMAGECOMPRESSION getPdfImageCompression(CXfoObjPtr pXfoObj);
void setPdfImageCompression(CXfoObjPtr pXfoObj, XfoPDFIMAGECOMPRESSION newVal);
int	 getPdfJPEGQuality(CXfoObjPtr pXfoObj);
void setPdfJPEGQuality(CXfoObjPtr pXfoObj, int newVal);
long getPdfCompressContentStream(CXfoObjPtr pXfoObj);
void setPdfCompressContentStream(CXfoObjPtr pXfoObj, long newVal);
long getPdfUseLaunchForRelativeURI(CXfoObjPtr pXfoObj);
void setPdfUseLaunchForRelativeURI(CXfoObjPtr pXfoObj, long newVal);
XfoPDFRGBCONVERSION getPdfRGBConversion(CXfoObjPtr pXfoObj);
void setPdfRGBConversion(CXfoObjPtr pXfoObj, XfoPDFRGBCONVERSION newVal);
int getPdfRasterizeResolution(CXfoObjPtr pXfoObj);
void setPdfRasterizeResolution(CXfoObjPtr pXfoObj, int newVal);
long getPdfLinearize(CXfoObjPtr pXfoObj);
void setPdfLinearize(CXfoObjPtr pXfoObj, long newVal);
long getPdfSignature(CXfoObjPtr pXfoObj);
void setPdfSignature(CXfoObjPtr pXfoObj, long newVal);
char* getPdfSignatureName(CXfoObjPtr pXfoObj, char* pVal, int size);
void setPdfSignatureName(CXfoObjPtr pXfoObj, char* newVal);
char* getPdfCertificateName(CXfoObjPtr pXfoObj, char* pVal, int size);
void setPdfCertificateName(CXfoObjPtr pXfoObj, char* newVal);
XfoEMBEDALLFONT getPdfEmbedAllFontsEx(CXfoObjPtr pXfoObj);
void setPdfEmbedAllFontsEx(CXfoObjPtr pXfoObj, XfoEMBEDALLFONT newVal);
XfoIMAGEDOWNSAMPLING getPdfImageDownSampling(CXfoObjPtr pXfoObj);
void setPdfImageDownSampling(CXfoObjPtr pXfoObj, XfoIMAGEDOWNSAMPLING newVal);
int getPdfImageDownSamplingTarget(CXfoObjPtr pXfoObj);
void setPdfImageDownSamplingTarget(CXfoObjPtr pXfoObj, int newVal);
int getPdfImageDownSamplingDPI(CXfoObjPtr pXfoObj);
void setPdfImageDownSamplingDPI(CXfoObjPtr pXfoObj, int newVal);
long getPdfPutImageColorProfile(CXfoObjPtr pXfoObj);
void setPdfPutImageColorProfile(CXfoObjPtr pXfoObj, long newVal);
XfoPDFIMAGECOMPRESSION getPdfGrayscaleImageCompression(CXfoObjPtr pXfoObj);
void setPdfGrayscaleImageCompression(CXfoObjPtr pXfoObj, XfoPDFIMAGECOMPRESSION newVal);
int getPdfGrayscaleJPEGQuality(CXfoObjPtr pXfoObj);
void setPdfGrayscaleJPEGQuality(CXfoObjPtr pXfoObj, int newVal);
XfoIMAGEDOWNSAMPLING getPdfGrayscaleImageDownSampling(CXfoObjPtr pXfoObj);
void setPdfGrayscaleImageDownSampling(CXfoObjPtr pXfoObj, XfoIMAGEDOWNSAMPLING newVal);
int getPdfGrayscaleImageDownSamplingTarget(CXfoObjPtr pXfoObj);
void setPdfGrayscaleImageDownSamplingTarget(CXfoObjPtr pXfoObj, int newVal);
int getPdfGrayscaleImageDownSamplingDPI(CXfoObjPtr pXfoObj);
void setPdfGrayscaleImageDownSamplingDPI(CXfoObjPtr pXfoObj, int newVal);
XfoMONOCHROMECOMPRESSION getPdfMonochromeImageCompression(CXfoObjPtr pXfoObj);
void setPdfMonochromeImageCompression(CXfoObjPtr pXfoObj, XfoMONOCHROMECOMPRESSION newVal);
XfoIMAGEDOWNSAMPLING getPdfMonochromeImageDownSampling(CXfoObjPtr pXfoObj);
void setPdfMonochromeImageDownSampling(CXfoObjPtr pXfoObj, XfoIMAGEDOWNSAMPLING newVal);
int getPdfMonochromeImageDownSamplingTarget(CXfoObjPtr pXfoObj);
void setPdfMonochromeImageDownSamplingTarget(CXfoObjPtr pXfoObj, int newVal);
int getPdfMonochromeImageDownSamplingDPI(CXfoObjPtr pXfoObj);
void setPdfMonochromeImageDownSamplingDPI(CXfoObjPtr pXfoObj, int newVal);
long getTwoPassFormatting(CXfoObjPtr pXfoObj);
void setTwoPassFormatting(CXfoObjPtr pXfoObj, long newVal);
long getPdfTag(CXfoObjPtr pXfoObj);
void setPdfTag(CXfoObjPtr pXfoObj, long newVal);
char* getPdfOutputWidth(CXfoObjPtr pXfoObj, char* pVal, int size);
void setPdfOutputWidth(CXfoObjPtr pXfoObj, char* newVal);
char* getPdfOutputHeight(CXfoObjPtr pXfoObj, char* pVal, int size);
void setPdfOutputHeight(CXfoObjPtr pXfoObj, char* newVal);
long getPdfErrorOnPDFXFault(CXfoObjPtr pXfoObj);
void setPdfErrorOnPDFXFault(CXfoObjPtr pXfoObj, long newVal);
long getPdfReversePage(CXfoObjPtr pXfoObj);
void setPdfReversePage(CXfoObjPtr pXfoObj, long newVal);
long getPdfImport3DAnnotation(CXfoObjPtr pXfoObj);
void setPdfImport3DAnnotation(CXfoObjPtr pXfoObj, long newVal);
long getPdfConvertImageColorSpace(CXfoObjPtr pXfoObj);
void setPdfConvertImageColorSpace(CXfoObjPtr pXfoObj, long newVal);
XfoSVGVERSION	getSvgVersion(CXfoObjPtr pXfoObj);
void setSvgVersion(CXfoObjPtr pXfoObj, XfoSVGVERSION newVal);
long getSvgGzipCompression(CXfoObjPtr pXfoObj);
void setSvgGzipCompression(CXfoObjPtr pXfoObj, long newVal);
long getSvgEmbedAllFonts(CXfoObjPtr pXfoObj);
void setSvgEmbedAllFonts(CXfoObjPtr pXfoObj, long newVal);
char* getSvgFormat(CXfoObjPtr pXfoObj, char* pVal, int size);
void setSvgFormat(CXfoObjPtr pXfoObj, char* newVal);
char* getSvgEmbedFonts(CXfoObjPtr pXfoObj, char* pVal, int size);
void setSvgEmbedFonts(CXfoObjPtr pXfoObj, char* newVal);
long getSvgErrorOnEmbedFault(CXfoObjPtr pXfoObj);
void setSvgErrorOnEmbedFault(CXfoObjPtr pXfoObj, long newVal);
XfoIMAGECONVERSION getSvgImageConversion(CXfoObjPtr pXfoObj);
void setSvgImageConversion(CXfoObjPtr pXfoObj, XfoIMAGECONVERSION newVal);
int getSvgJPEGQuality(CXfoObjPtr pXfoObj);
void setSvgJPEGQuality(CXfoObjPtr pXfoObj, int newVal);
XfoIMAGEPROCTYPE getSvgImageProcessingType(CXfoObjPtr pXfoObj);
void setSvgImageProcessingType(CXfoObjPtr pXfoObj, XfoIMAGEPROCTYPE newVal);
char* getSvgImageCopyPath(CXfoObjPtr pXfoObj, char* pVal, int size);
void setSvgImageCopyPath(CXfoObjPtr pXfoObj, char* newVal);
long getSvgSingleFile(CXfoObjPtr pXfoObj);
void setSvgSingleFile(CXfoObjPtr pXfoObj, long newVal);
char* getSvgSingleFileMaxHeight(CXfoObjPtr pXfoObj, char* pVal, int size);
void setSvgSingleFileMaxHeight(CXfoObjPtr pXfoObj, char* newVal);
int getSvgSingleFileMaxPages(CXfoObjPtr pXfoObj);
void setSvgSingleFileMaxPages(CXfoObjPtr pXfoObj, int newVal);
int getSvgImageDownsamplingDPI(CXfoObjPtr pXfoObj);
void setSvgImageDownsamplingDPI(CXfoObjPtr pXfoObj, int dpi);
int getSvgImageDownsamplingMethod(CXfoObjPtr pXfoObj);
void setSvgImageDownsamplingMethod(CXfoObjPtr pXfoObj, int type);
long getSvgImageRename(CXfoObjPtr pXfoObj);
void setSvgImageRename(CXfoObjPtr pXfoObj, long newVal);
char* getSvgImagePrefix(CXfoObjPtr pXfoObj, char* pVal, int size);
void setSvgImagePrefix(CXfoObjPtr pXfoObj, char* newVal);
long getSvgSinglePageNumber(CXfoObjPtr pXfoObj);
void setSvgSinglePageNumber(CXfoObjPtr pXfoObj, long newVal);
int getSvgRasterizeResolution(CXfoObjPtr pXfoObj);
void setSvgRasterizeResolution(CXfoObjPtr pXfoObj, int newVal);
long getStartVolume(CXfoObjPtr pXfoObj);
void setStartVolume(CXfoObjPtr pXfoObj, long newVal);
long getEndVolume(CXfoObjPtr pXfoObj);
void setEndVolume(CXfoObjPtr pXfoObj, long newVal);
long getMultiVolume(CXfoObjPtr pXfoObj);
long getTotalVolumeCount(CXfoObjPtr pXfoObj);
long getOutputVolumeCount(CXfoObjPtr pXfoObj);
void setMultiVolume(CXfoObjPtr pXfoObj, long newVal);
XfoIfErrorLevel getExitLevel(CXfoObjPtr pXfoObj);
void setExitLevel(CXfoObjPtr pXfoObj, XfoIfErrorLevel newVal);
XfoIfErrorLevel getErrorLevel(CXfoObjPtr pXfoObj);
XfoIfErrorCode getErrorCode(CXfoObjPtr pXfoObj);
char* getErrorMessage(CXfoObjPtr pXfoObj, char* pVal, int size);
void setFontAlias(CXfoObjPtr pXfoObj, char* src, char* dst);
void clearFontAlias(CXfoObjPtr pXfoObj);
void eraseFontAlias(CXfoObjPtr pXfoObj, char* src);
XfoIfErrorCode execute(CXfoObjPtr pXfoObj);
void clear(CXfoObjPtr pXfoObj);
void setOnMessageProc(CXfoObjPtr pXfoObj, XfoOnMessageProc* proc);
void setOnMessageProcW(CXfoObjPtr pXfoObj, XfoOnMessageProcW* proc);
void setOnFormatPageProc(CXfoObjPtr pXfoObj, XfoOnFormatPageProc* proc);
void setOnMessageProcEx(CXfoObjPtr pXfoObj, XfoOnMessageProcEx* proc, void* pAnyObj);
void setOnMessageProcExW(CXfoObjPtr pXfoObj, XfoOnMessageProcExW* proc, void* pAnyObj);
void setOnFormatPageProcEx(CXfoObjPtr pXfoObj, XfoOnFormatPageProcEx* proc, void* pAnyObj);
void setXSLTParam(CXfoObjPtr pXfoObj, char* paramName, char* value);
void clearXSLTParam(CXfoObjPtr pXfoObj);
XfoErrorStreamType getErrorStreamType(CXfoObjPtr pXfoObj);
void setErrorStreamType(CXfoObjPtr pXfoObj, XfoErrorStreamType type);
char* getPrinterName(CXfoObjPtr pXfoObj, char* pVal, int size);
void setPrinterName(CXfoObjPtr pXfoObj, char* newVal);
long getFormattedPages(CXfoObjPtr pXfoObj);
char* getPrinterSettingURI(CXfoObjPtr pXfoObj, char* pVal, int size);
void setPrinterSettingURI(CXfoObjPtr pXfoObj, char* newVal);
long getPrnCopies(CXfoObjPtr pXfoObj);
void setPrnCopies(CXfoObjPtr pXfoObj, long newVal);
long getPrnCollate(CXfoObjPtr pXfoObj);
void setPrnCollate(CXfoObjPtr pXfoObj, long newVal);
long getBatchPrint(CXfoObjPtr pXfoObj);
void setBatchPrint(CXfoObjPtr pXfoObj, long newVal);
char* getDocumentText(CXfoObjPtr pXfoObj, char* pVal, int size);
void setDocumentText(CXfoObjPtr pXfoObj, char* newVal);
char* getStylesheetText(CXfoObjPtr pXfoObj, char* pVal, int size);
void setStylesheetText(CXfoObjPtr pXfoObj, char* newVal);
char* getVersion(CXfoObjPtr pXfoObj, char* pVal, int size);
XfoINXOUTPUTMODE getInxOutputMode(CXfoObjPtr pXfoObj);
void setInxOutputMode(CXfoObjPtr pXfoObj, XfoINXOUTPUTMODE newVal);
XfoMIFOUTPUTMODE getMifOutputMode(CXfoObjPtr pXfoObj);
void setMifOutputMode(CXfoObjPtr pXfoObj, XfoMIFOUTPUTMODE newVal);
XfoMIFIMAGEPROCMODE getMifIpMode(CXfoObjPtr pXfoObj);
void setMifIpMode(CXfoObjPtr pXfoObj, XfoMIFIMAGEPROCMODE mode);
